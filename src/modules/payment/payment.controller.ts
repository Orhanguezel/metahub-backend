import { Request, Response } from "express";
import asyncHandler from "express-async-handler";
import Payment from "./payment.models";
import { Types } from "mongoose";

// üí≥ Yeni √∂deme olu≈ütur
export const createPayment = asyncHandler(
  async (req: Request, res: Response) => {
    const { order, amount, method } = req.body;

    if (!order || !amount || !method) {
      res.status(400).json({
        message:
          req.locale === "de"
            ? "Bestellung, Betrag und Zahlungsmethode sind erforderlich."
            : req.locale === "tr"
            ? "Sipari≈ü, tutar ve √∂deme y√∂ntemi gereklidir."
            : "Order, amount and method are required.",
      });
      return;
    }

    const payment = await Payment.create({
      order,
      amount,
      method,
      status: "pending",
    });

    res.status(201).json({
      message:
        req.locale === "de"
          ? "Zahlung erfolgreich erstellt."
          : req.locale === "tr"
          ? "√ñdeme ba≈üarƒ±yla olu≈üturuldu."
          : "Payment created.",
      payment,
    });
  }
);

// üìã T√ºm √∂demeleri getir (admin)
export const getAllPayments = asyncHandler(
  async (_req: Request, res: Response) => {
    const payments = await Payment.find()
      .populate("order")
      .sort({ createdAt: -1 });
    res.json(payments);
  }
);

// üîç Belirli sipari≈ü i√ßin √∂deme
export const getPaymentByOrderId = asyncHandler(
  async (req: Request, res: Response) => {
    const payment = await Payment.findOne({
      order: req.params.orderId,
    }).populate("order");
    if (!payment) {
      res.status(404).json({
        message:
          req.locale === "de"
            ? "F√ºr diese Bestellung wurde keine Zahlung gefunden."
            : req.locale === "tr"
            ? "Bu sipari≈üe ait √∂deme bulunamadƒ±."
            : "Payment not found for this order.",
      });
      return;
    }

    res.json(payment);
  }
);

// ‚úÖ √ñdemeyi "√∂dendi" olarak i≈üaretle
export const markPaymentAsPaid = asyncHandler(
  async (req: Request, res: Response) => {
    const payment = await Payment.findById(req.params.id);
    if (!payment) {
      res.status(404).json({
        message:
          req.locale === "de"
            ? "Zahlung nicht gefunden."
            : req.locale === "tr"
            ? "√ñdeme bulunamadƒ±."
            : "Payment not found.",
      });
      return;
    }

    payment.status = "paid";
    payment.paidAt = new Date();
    await payment.save();

    res.json({
      message:
        req.locale === "de"
          ? "Zahlung als bezahlt markiert."
          : req.locale === "tr"
          ? "√ñdeme √∂dendi olarak i≈üaretlendi."
          : "Payment marked as paid.",
      payment,
    });
  }
);

// ‚ùå √ñdemeyi "ba≈üarƒ±sƒ±z" olarak i≈üaretle
export const markPaymentAsFailed = asyncHandler(
  async (req: Request, res: Response) => {
    const payment = await Payment.findById(req.params.id);
    if (!payment) {
      res.status(404).json({
        message:
          req.locale === "de"
            ? "Zahlung nicht gefunden."
            : req.locale === "tr"
            ? "√ñdeme bulunamadƒ±."
            : "Payment not found.",
      });
      return;
    }

    payment.status = "failed";
    await payment.save();

    res.json({
      message:
        req.locale === "de"
          ? "Zahlung als fehlgeschlagen markiert."
          : req.locale === "tr"
          ? "√ñdeme ba≈üarƒ±sƒ±z olarak i≈üaretlendi."
          : "Payment marked as failed.",
      payment,
    });
  }
);

// üîÅ √ñdeme y√∂ntemini g√ºncelle
export const updatePaymentMethod = asyncHandler(
  async (req: Request, res: Response) => {
    const { method } = req.body;
    const payment = await Payment.findById(req.params.id);

    if (!payment) {
      res.status(404).json({
        message:
          req.locale === "de"
            ? "Zahlung nicht gefunden."
            : req.locale === "tr"
            ? "√ñdeme bulunamadƒ±."
            : "Payment not found.",
      });
      return;
    }

    const validMethods = ["cash_on_delivery", "credit_card", "paypal"];
    if (!validMethods.includes(method)) {
      res.status(400).json({
        message:
          req.locale === "de"
            ? "Ung√ºltige Zahlungsmethode."
            : req.locale === "tr"
            ? "Ge√ßersiz √∂deme y√∂ntemi."
            : "Invalid payment method.",
      });
      return;
    }

    payment.method = method;
    await payment.save();

    res.json({
      message:
        req.locale === "de"
          ? "Zahlungsmethode aktualisiert."
          : req.locale === "tr"
          ? "√ñdeme y√∂ntemi g√ºncellendi."
          : "Payment method updated.",
      payment,
    });
  }
);

// üë§ Kullanƒ±cƒ±ya ait √∂demeler
export const getPaymentsByUser = asyncHandler(
  async (req: Request, res: Response) => {
    const userId = req.user?.id;

    if (!userId || !Types.ObjectId.isValid(userId)) {
      res.status(400).json({
        message:
          req.locale === "de"
            ? "Ung√ºltige Benutzer-ID."
            : req.locale === "tr"
            ? "Ge√ßersiz kullanƒ±cƒ± ID'si."
            : "Invalid user ID.",
      });
      return;
    }

    const payments = await Payment.find({}).populate({
      path: "order",
      match: { user: userId },
    });

    const filtered = payments.filter((p) => p.order !== null);
    res.json(filtered);
  }
);

// üß™ Stripe sim√ºlasyonu
export const simulateStripePayment = asyncHandler(
  async (_req: Request, res: Response) => {
    res.json({
      message:
        _req.locale === "de"
          ? "Stripe-Zahlung simuliert."
          : _req.locale === "tr"
          ? "Stripe √∂demesi sim√ºle edildi."
          : "Stripe payment processed (simulated).",
    });
  }
);

// üß™ PayPal sim√ºlasyonu
export const simulatePayPalPayment = asyncHandler(
  async (_req: Request, res: Response) => {
    res.json({
      message:
        _req.locale === "de"
          ? "PayPal-Zahlung simuliert."
          : _req.locale === "tr"
          ? "PayPal √∂demesi sim√ºle edildi."
          : "PayPal payment processed (simulated).",
    });
  }
);
