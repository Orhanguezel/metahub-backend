{
  "page": {
    "title": "Scheduling Plans",
    "subtitle": "Recurring job plans by apartment/service/template context"
  },
  "list": {
    "title": "Plan List",
    "search": "Search...",
    "filters": {
      "status": "Status",
      "apartment": "Apartment",
      "service": "Service",
      "template": "Template",
      "contract": "Contract",
      "tag": "Tag",
      "from": "Start (>=)",
      "to": "Start (<=)"
    },
    "table": {
      "code": "Code",
      "apartment": "Apartment",
      "service": "Service",
      "pattern": "Recurrence",
      "nextRunAt": "Next Run",
      "status": "Status",
      "updatedAt": "Updated"
    }
  },
  "form": {
    "titleCreate": "Create Plan",
    "titleUpdate": "Edit Plan",
    "sections": {
      "anchor": "Context (Anchor)",
      "pattern": "Recurrence Rule",
      "window": "Time Window",
      "policy": "Generation Policy",
      "exceptions": "Exceptions (Skip/Blackout)"
    },
    "fields": {
      "apartmentRef": "Apartment",
      "categoryRef": "Category/Neighborhood",
      "serviceRef": "Service",
      "templateRef": "Operation Template",
      "contractRef": "Contract",
      "timezone": "Time Zone",
      "patternType": "Pattern Type",
      "every": "Every (N)",
      "daysOfWeek": "Days of Week",
      "dayOfMonth": "Day of Month",
      "nth": "Nth",
      "weekday": "Weekday",
      "month": "Month",
      "startDate": "Start Date",
      "endDate": "End Date",
      "startTime": "Start Time",
      "endTime": "End Time",
      "durationMinutes": "Duration (min)",
      "leadTimeDays": "Lead Time (days)",
      "lockAheadPeriods": "Lock Ahead Periods",
      "autoAssign": "Auto Assign",
      "preferredEmployees": "Preferred Employees",
      "minCrewSize": "Min Crew",
      "maxCrewSize": "Max Crew",
      "skipDates": "Skip Dates",
      "blackouts": "Blackout Ranges"
    },
    "actions": {
      "previewDates": "Preview Candidate Dates",
      "save": "Save",
      "update": "Update",
      "delete": "Delete",
      "cancel": "Cancel"
    }
  },
  "status": {
    "active": "Active",
    "paused": "Paused",
    "archived": "Archived"
  },
  "pattern": {
    "weekly": "Weekly",
    "dayOfMonth": "Day of Month",
    "nthWeekday": "Nth Weekday of Month",
    "yearly": "Yearly"
  },
  "weekday": {
    "0": "Sunday",
    "1": "Monday",
    "2": "Tuesday",
    "3": "Wednesday",
    "4": "Thursday",
    "5": "Friday",
    "6": "Saturday"
  },
  "messages": {
    "created": "Plan created.",
    "updated": "Plan updated.",
    "deleted": "Plan deleted.",
    "fetched": "Plan fetched.",
    "listFetched": "Plan list fetched.",
    "error.create_fail": "Error occurred while creating the plan.",
    "invalidId": "Invalid identifier.",
    "notFound": "Record not found."
  },
  "validation": {
    "invalidObjectId": "Invalid ObjectId.",
    "anchorRequired": "Anchor (context) is required.",
    "anchorInvalid": "Anchor (context) is invalid.",
    "apartmentRef": "apartmentRef must be a valid ObjectId.",
    "categoryRef": "categoryRef must be a valid ObjectId.",
    "serviceRef": "serviceRef must be a valid ObjectId.",
    "templateRef": "templateRef must be a valid ObjectId.",
    "contractRef": "contractRef must be a valid ObjectId.",
    "patternRequired": "Recurrence pattern is required.",
    "patternInvalid": "Recurrence pattern is invalid.",
    "patternType": "Invalid pattern type.",
    "patternEvery": "'Every (N)' must be >= 1.",
    "daysOfWeek": "Days must be within 0..6.",
    "dayOfMonth": "Day of month must be within 1..31.",
    "nth": "Nth must be within 1..5.",
    "weekday": "Weekday must be within 0..6.",
    "month": "Month must be within 1..12.",
    "windowInvalid": "Time window object is invalid.",
    "duration": "Duration must be >= 0.",
    "policyInvalid": "Generation policy object is invalid.",
    "leadTimeDays": "Lead time must be >= 0.",
    "lockAhead": "Lock-ahead periods must be >= 0.",
    "startDate": "A valid start date is required.",
    "endDate": "End date must be valid.",
    "skipDates": "skipDates must be an array.",
    "blackouts": "blackouts must be an array.",
    "tags": "tags must be an array."
  }
}
