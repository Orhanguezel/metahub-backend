import express, { Router } from "express";
import fs from "fs/promises";
import path from "path";
import logger from "@/core/middleware/logger/logger";

export const getRouter = async (): Promise<Router> => {
  const router = express.Router();
  const modulesPath = path.join(__dirname, "..", "modules");
  const modules = await fs.readdir(modulesPath, { withFileTypes: true });

  console.log(
    `üì¶ [ROUTER] Bulunan mod√ºller:`,
    modules.map((m) => m.name).join(", ")
  );

  for (const mod of modules) {
    if (!mod.isDirectory()) continue;

    const moduleName = mod.name;
    const moduleDir = path.join(modulesPath, moduleName);

    try {
      // Dinamik import i√ßin: .ts uzantƒ±sƒ±nƒ± kaldƒ±r
      const indexImport = await import(
        path.join(moduleDir, "index.ts").replace(/\.ts$/, "")
      );
      const modRouter = indexImport.default;

      if (!modRouter) {
        logger.warn(
          `[ROUTER] ‚ö†Ô∏è  [WARN] ${moduleName}/index.ts has no default export.`,
          { module: moduleName, event: "router.noDefaultExport" }
        );
        continue;
      }

      router.use(`/${moduleName.toLowerCase()}`, modRouter);

      logger.info(`[ROUTER] Mounted /${moduleName.toLowerCase()}`, {
        module: moduleName,
        event: "router.mount",
      });
      console.log(`[ROUTER] ‚úÖ Mounted /${moduleName.toLowerCase()}`);
    } catch (err: any) {
      logger.error(
        `[ROUTER] ‚ùå [FAIL] Failed to load module "${moduleName}": ${err.message}`,
        { module: moduleName, event: "router.loadFail", error: err }
      );

      // Yeni log: Mod√ºl mount edilemediyse
      console.log(`[ROUTER] ‚ùå Failed to mount /${moduleName.toLowerCase()}`);
      continue;
    }
  }

  console.log("‚úÖ [ROUTER] T√ºm mod√ºller mount edildi ve router hazƒ±r.");
  return router;
};
